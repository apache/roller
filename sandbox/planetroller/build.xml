<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  The ASF licenses this file to You
  under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.  For additional information regarding
  copyright in this work, please see the NOTICE file in the top level
  directory of this distribution.
-->
<!DOCTYPE project [
    <!ENTITY custom-web SYSTEM "custom/custom-web.xmlf">
]>
<project name="planetroller" default="stage-webapp" basedir=".">
    
    <description>Builds, tests, and runs the project planetroller.</description>   

    <property file="./ant.properties" />
    
    <!-- core properties -->
    <property name="ro.build"            value="${basedir}/build" />
    <property name="ro.src"              value="${basedir}/src" />
    <property name="ro.tools"            value="${basedir}/../../tools" />
    <property name="ro.test"             value="${basedir}/test" />
    <property name="ro.web"              value="${basedir}/web" />
    
    <!-- build properties -->
    <property name="build.compile"                  value="${ro.build}/compile"/>
    <property name="build.compile.classes"          value="${build.compile}/classes"/>
    <property name="build.compile.test"             value="${build.compile}/test"/>
    <property name="build.lib"           value="${ro.build}/lib"/>
    <property name="build.webapp"        value="${ro.build}/webapp"/>
    <property name="build.test"          value="${ro.build}/test"/>
    <property name="build.test.reports"  value="${build.test}/reports"/>
    
    
    <fileset id="roller-jars" dir="${ro.tools}">
        <!-- needed for Hibernate -->
        <include name="hibernate-3.1/hibernate3.jar"/>
        <include name="hibernate-3.1/lib/antlr.jar"/>
        <include name="hibernate-3.1/lib/asm.jar"/>
        <include name="hibernate-3.1/lib/asm-attrs.jar"/>
        <include name="hibernate-3.1/lib/cglib-2.1.3.jar"/>
        <include name="hibernate-3.1/lib/ehcache-1.1.jar"/>
        <include name="hibernate-3.1/lib/dom4j-1.6.1.jar"/>
        <include name="hibernate-3.1/lib/jta.jar"/>
        <include name="hibernate-3.1/lib/jdbc2_0-stdext.jar"/>
                
        <!-- needed for ROME -->
        <include name="lib/rome-0.9.jar"/>
        <include name="lib/rome-fetcher-0.9.jar"/>
        <include name="lib/jdom.jar"/>
        
        <!-- Needed for Velocity -->
        <include name="lib/velocity-1.4.jar"/>
        <include name="lib/velocity-dep-1.4.jar"/>
        
        <!-- General dependencies -->
        <include name="lib/commons-codec-1.3.jar"/>
        <include name="struts-1.2.4/lib/antlr.jar"/>
        <include name="struts-1.2.4/lib/commons-lang-2.0.jar"/>
        <include name="struts-1.2.4/lib/commons-logging.jar"/>
        <include name="struts-1.2.4/lib/commons-fileupload.jar"/>
        <include name="struts-1.2.4/lib/commons-validator.jar"/>
        <include name="struts-1.2.4/lib/commons-collections.jar"/>
        <include name="lib/log4j-1.2.11.jar"/>
        <include name="lib/jaxen-full.jar"/>
        <include name="lib/saxpath.jar"/>
        <include name="lib/activation.jar"/>
        <include name="lib/mail.jar"/>
    </fileset>
    
    <path id="planet.path">
        <fileset refid="roller-jars" />
        
        <fileset dir="${ro.tools}/buildtime/tomcat-5.0.28">
            <include name="servlet-api.jar"/>
        </fileset>
        
        <fileset dir="${ro.web}/WEB-INF/lib">
            <include name="commons-logging-1.0.4.jar"/>
            <include name="commons-lang-2.1.jar"/>  
            <include name="myfaces-api-1.1.4.jar"/>  
            <include name="tomahawk-1.1.3.jar"/>  
        </fileset>                      
    </path>
    
    <path id="xdoclet.path">
        <path refid="planet.path"/>
        <fileset dir="${ro.tools}/buildtime" includes="ejb-1.1.jar"/>
        <fileset dir="${ro.tools}/buildtime/xdoclet-1.2.3/lib" includes="*.jar"/>
    </path>
    
    <path id="test.path">
        <!-- testing jars -->
        <fileset dir="${ro.tools}/buildtime/mockrunner-0.35/lib">
            <include name="*.jar"/>
        </fileset>
        
        <pathelement location="${ro.tools}/buildtime/ant-1.6.2/ant.jar"/>
        <pathelement location="${ro.tools}/buildtime/strutstest-2.0.0.jar"/>
        <pathelement location="${ro.tools}/buildtime/junit-3.8.1.jar"/>
        <pathelement location="${ro.tools}/buildtime/derby.jar"/>
        <pathelement location="${ro.tools}/buildtime/derbyclient.jar"/>
        <pathelement location="${ro.tools}/buildtime/derbynet.jar"/>
        
        <pathelement location="${ro.tools}/lib/commons-httpclient-2.0.2.jar"/>
        
        <!-- plus normal jars -->
        <path refid="planet.path"/>

        <!-- plus already built roller planet jars -->
        <fileset dir="${build.lib}">
            <include name="*.jar" />
        </fileset>
    </path>
    
    
    <target name="clean" description="Clean (i.e. remove) build and dist dirs">
        <delete dir="${ro.build}" />
        <delete dir="${ro.dist}" />
    </target>
    
    
    <!-- ============================================== -->
    <!-- generate code/files for the business layer -->
    <target name="generate" description="Generate business layer resources">

        <taskdef name="hibernatedoclet"
            classname="xdoclet.modules.hibernate.HibernateDocletTask"
            classpathref="xdoclet.path" />

        <!-- generate hibernate mapping files -->
        <hibernatedoclet destdir="${build.compile.classes}"
            excludedtags="@version,@author"
            addedtags="@xdoclet-generated at ${TODAY}"
            force="true">
            
            <fileset dir="${ro.src}" includes="org/apache/roller/planet/pojos/*Data.java" />
            <hibernate validatexml="true" version="3.0"/>
            
        </hibernatedoclet>
    
    </target>
    
    
    <!-- ============================================== -->
    <!-- build the code and jar it up -->
    <target name="build" depends="generate">
        
        <!-- compile planet classes -->
        <mkdir dir="${build.compile.classes}"/>
        <javac destdir="${build.compile.classes}"
               debug="${build.debug}" 
               source="${build.sourcelevel}"
               deprecation="${build.deprecation}">
            
            <src path="${ro.src}" />
            
            <classpath>
                <path refid="planet.path"/>
            </classpath>
        </javac>
        
        <!-- Copy resources -->
        <copy todir="${build.compile.classes}">
            <fileset dir="${ro.src}" excludes="**/*.java, **/*.html, **/*.png" />
        </copy>
        
        <!-- Jar up the business layer -->
        <mkdir dir="${build.lib}"/>
        <jar basedir="${build.compile.classes}"
             jarfile="${build.lib}/roller-planet.jar"/>
        
    </target>
    
    
    <!-- ============================================== -->
    <!-- stage the full webapp -->
    <target name="stage-webapp" depends="build" description="Build Planet webapp">
        
        <mkdir dir="${build.webapp}/WEB-INF/lib" />
        <copy todir="${build.webapp}/WEB-INF/lib" flatten="true">
            <fileset dir="${build.lib}" />
            <fileset refid="roller-jars" />
        </copy>         

        <copy todir="${build.webapp}">
            <fileset dir="${ro.web}" includes="**/**" />
        </copy> 

        <mkdir dir="${build.webapp}/WEB-INF/templates" />
        <copy todir="${build.webapp}/WEB-INF/templates">
            <fileset dir="./templates" includes="**/**" />
        </copy> 
        
        &custom-web;

    </target>
    
   
    <!-- Copy files locally for convenience in IDE -->
    <target name="copy-jars-for-ide">
        <mkdir dir="./lib" />
        <copy todir="./lib">
            <fileset refid="roller-jars" />
        </copy> 
    </target>
    
    
    <target name="build-tests" depends="stage-webapp" description="Build unit tests">
    
        <mkdir dir="${build.compile.test}" />
    
        <!-- compile all test classes -->
        <javac destdir="${build.compile.test}"
            includeantruntime="false"
            debug="${build.debug}" 
            source="${build.sourcelevel}"
            deprecation="${build.deprectation}">
            
            <src path="${ro.test}" />
            
            <classpath>
                <path refid="test.path"/>
            </classpath>
        </javac>
                
        <!-- Copy test resources -->
        <copy todir="${build.compile.test}">
            <fileset dir="${ro.test}" excludes="**/*.java, **/*.html, **/*.png" />
        </copy>
    
        <!-- register Ant tasks that were just built -->
        <taskdef name="startdb" classname="org.apache.roller.ant.StartDerbyTask" 
        classpath="${ro.tools}/buildtime/derby.jar;${ro.tools}/buildtime/derbynet.jar;${build.compile.test}" />
        <taskdef name="stopdb" classname="org.apache.roller.ant.StopDerbyTask" 
        classpath="${ro.tools}/buildtime/derby.jar;${ro.tools}/buildtime/derbynet.jar;${build.compile.test}" />
    
        <!-- 
        Copy web config files to ${build.tests} to make them available for testing.
        This includes the WEB-INF directory, minus jsps
        -->
        <mkdir dir="${build.test}/WEB-INF" />
        <copy todir="${build.test}/WEB-INF">
            <fileset dir="${basedir}/web/WEB-INF">
                <exclude name="jsps/**" />
            </fileset>
        </copy>

        <!-- 
        Copy custom testing files which will overwrite some config files 
        -->
        <copy todir="${build.test}">
            <fileset dir="${basedir}/testdata" />
        </copy>
    
    </target>
    
    
    <!-- ===================================== -->
    <!-- test planet functionality -->
    <target name="test-planet" depends="build-tests" description="Back-end tests">
        
        <mkdir dir="${build.test.reports}/business/xml"/>
        <mkdir dir="${build.test.reports}/business/html"/>
        
        <antcall target="start-db" /> 
        <antcall target="init-db" />
        
        <junit fork="true" dir="${build.test}" printsummary="on" showOutput="true">
            <classpath>
                <!-- testing jars -->
                <path refid="test.path"/>
                
                <!-- plus our compiled test classes -->
                <pathelement location="${build.compile.test}"/>
        
                <!-- plus our config location, like the webapp would have -->
                <pathelement location="${build.test}/WEB-INF/classes" />
            </classpath>
            
            <!-- needed to satisfy ref in log4j.properties -->
            <jvmarg value="-Dcatalina.base=${build.test}"/> 
            <jvmarg value="-Dro.build=${ro.build}"/>
            <jvmarg value="-Dplanet.custom.config=${build.test}/planet-custom.properties"/>
            <jvmarg value="-Dhttp.proxySet=true"/>
            <jvmarg value="-Dhttp.proxyHost=webcache.sfbay.sun.com"/>
            <jvmarg value="-Dhttp.proxyPort=8080"/>
            <formatter type="xml"/>
            <batchtest toDir="${build.test.reports}/business/xml" haltonerror="${junit.haltonerror}">
                <fileset dir="${build.compile.test}">
                    <include name="org/apache/roller/planet/business/PlanetTestSuite.class"/>
                </fileset>
            </batchtest>
        </junit>
        
        <junitreport todir="${build.test.reports}/business/xml">
            <fileset dir="${build.test.reports}/business/xml">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="noframes" toDir="${build.test.reports}/business/html"/>
        </junitreport>
        
        <antcall target="stop-db" />
    </target>
    
    
    <!-- ********************************************************************* -->
    <!-- Derby start, init and stop targets -->
    <!-- ********************************************************************* -->
    
    <target name="init-db" description=
            "Initializes built-in database by running drop table and create table">
        <sql driver="org.apache.derby.jdbc.ClientDriver"
             url="jdbc:derby://localhost:3219/roller;create=true"
             userid="app" password="app"
             src="../../build/webapp/WEB-INF/dbscripts/droptables.sql" onerror="continue"
             classpath="${ro.tools}/buildtime/derbyclient.jar" />    
        <sql driver="org.apache.derby.jdbc.ClientDriver" onerror="continue"
             url="jdbc:derby://localhost:3219/roller"
             userid="app" password="app"
             src="../../build/webapp/WEB-INF/dbscripts/derby/createdb.sql"
             classpath="${ro.tools}/buildtime/derbyclient.jar" /> 
    </target>
    
    <target name="start-db" description="Starts built-in database">  
        <startdb database="${build.test}/derby-system/roller" port="3219" /> 
    </target>
    
    <target name="stop-db" description="Drop tables and stops the built-in database">   
        <stopdb port="3219"/>
    </target>

</project>
