buildscript {
	ext {
		springBootVersion = '2.0.4.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'com.bmuschko:gradle-docker-plugin:3.2.5'
	}
}

plugins {
	id 'com.bmuschko.docker-remote-api' version '3.2.3'
}

apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'org.tightblog'
version = '3.2'
sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

repositories {
	mavenCentral()
	jcenter()
}

sourceSets {
	test {
		java {
			srcDir 'src/test/java'
			exclude '**/*IT.java'
		}
	}
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/test/java')
			include '**/*IT.java'
		}
		resources.srcDir file('src/test/resources')
	}
}

static def standardCompile(options) {
    options.compilerArgs += ["-proc:none"]
}

compileGroovy {
    standardCompile(options)
}

compileJava {
    standardCompile(options)
}

compileTestJava {
    standardCompile(options)
}

compileIntegrationTestJava {
    standardCompile(options)
}

project.ext.buildNumber = Instant.now().getEpochSecond()
project.ext.itDatabasePort = 32794

task createDDLScripts (dependsOn: 'classes', type: JavaExec) {
	main = 'genDDL'
	classpath = sourceSets.main.runtimeClasspath
}

def standardProcessResources(obj) {
    obj.filesMatching(['tightblog.properties', 'tightblog-custom.properties']) {
        expand(version: version,
               buildNumber: buildNumber,
               itDatabasePort: itDatabasePort,
               catalinaBase: System.getenv("CATALINA_BASE"),
               buildDir: buildDir
        )
    }
}

processResources {
    standardProcessResources(processResources)
}

processTestResources {
    standardProcessResources(processTestResources)
}

processIntegrationTestResources {
    standardProcessResources(processIntegrationTestResources)
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
	// using log4j2 instead of logback
	// global excludes: http://mrhaki.blogspot.com/2012/10/gradle-goodness-exclude-transitive.html
	all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.container.extras.DockerWaitHealthyContainer

import java.time.Instant

// https://bmuschko.com/blog/dockerized-spring-boot-app/
task buildImage(type: DockerBuildImage) {
	inputDir = file('src/test/resources')
	tag = "tightblog/it-database123:latest"
}

// variant of https://bmuschko.com/blog/docker-integration-testing/
task createContainer(type: DockerCreateContainer) {
	dependsOn buildImage
	targetImageId { buildImage.getImageId() }
	portBindings = [itDatabasePort + ':5432']
}

task startContainer(type: DockerStartContainer) {
	dependsOn createContainer
	targetContainerId { createContainer.getContainerId() }
}

task startAndWaitOnHealthyContainer(type: DockerWaitHealthyContainer) {
	dependsOn startContainer
	timeout = 60
	targetContainerId { createContainer.getContainerId() }
}

task stopContainer(type: DockerStopContainer) {
	targetContainerId { createContainer.getContainerId() }
}

task integrationTest(type: Test) {
	dependsOn startAndWaitOnHealthyContainer
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	outputs.upToDateWhen { false }
	mustRunAfter test
	finalizedBy stopContainer
}

war.dependsOn createDDLScripts
check.dependsOn integrationTest


checkstyle {
	toolVersion = "8.9"
	config = resources.text.fromFile('checkstyle.xml', 'UTF-8')
	showViolations = true
	ignoreFailures = false
}

dependencies {
	compile localGroovy()
	compile("org.springframework.boot:spring-boot-starter-data-jpa") {
		exclude group: "org.hibernate", module: "hibernate-entitymanager"
	}
	compile('org.eclipse.persistence:org.eclipse.persistence.jpa:2.7.2')
    compile('org.springframework.boot:spring-boot-legacy:2.0.0.RELEASE')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-log4j2')
    compile(group: 'org.springframework.security', name: 'spring-security-taglibs', version:'5.0.7.RELEASE') {
        exclude(module: 'spring-web')
    }
	compile('org.apache.commons:commons-lang3:3.7')
	compile('org.apache.commons:commons-text:1.4')
    compile('org.apache.tiles:tiles-jsp:3.0.8')
	compile('commons-validator:commons-validator:1.6')
	compile('org.springframework.mobile:spring-mobile-device:1.1.5.RELEASE')
	compile('org.apache.lucene:lucene-analyzers-common:7.4.0')
	compile('org.apache.lucene:lucene-queryparser:7.4.0')
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile('org.jsoup:jsoup:1.11.3')
	compile('com.github.ben-manes.caffeine:caffeine:2.6.2')
	compile('org.thymeleaf:thymeleaf-spring4:3.0.9.RELEASE')
	compile('org.jboss.aerogear:aerogear-otp-java:1.0.0')
	compile('com.atlassian.commonmark:commonmark:0.11.0')
	compile('commons-fileupload:commons-fileupload:1.3.3')
 	runtime('org.postgresql:postgresql')
	// needed for log4j2 application logging to work
	runtime group: 'org.apache.logging.log4j', name: 'log4j-jcl', version:'2.11.0'
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
	testCompile('org.postgresql:postgresql:42.2.4')
    compile('javax.servlet:jstl:1.2')
    providedCompile('org.apache.tomcat.embed:tomcat-embed-jasper:9.0.11')
    // velocity used only when running Groovy task during build
    providedCompile('org.apache.velocity:velocity-engine-core:2.0') {
		exclude group: "org.apache.commons", module: "commons-lang3"
	}
}
