# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  The ASF licenses this file to You
# under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.  For additional information regarding
# copyright in this work, please see the NOTICE file in the top level
# directory of this distribution.
#
# Source file modified from the original ASF source; all changes made
# are also under Apache License.
#
# tightblog.properties
#
# This file is for meant for TightBlog deployment properties
# These properties require an application reboot for any changed values to be picked up.
#
# You can override the values in this file in a couple ways ..
#   1. define a tightblog-custom.properties file and place it somewhere
#       at the root of one of your classpath locations.
#       for example:
#           <tomcat home folder>/lib
#           <tightblog expanded war>/WEB-INF/classes
#
#   2. specify a custom properties file via jvm option
#       example:
#           -Dtightblog.custom.config=/path/to/properties/file
#
#   If you do both, #2 will override any properties in #1.
#
#   **NOTE: if you run multiple instances of TightBlog on the same server
#           then you should beware of the fact that the override options above
#           may affect *all* of your running instances.  if you want to do
#           custom overrides for each instance then you must do it by
#           placing a tightblog-custom.properties file at WEB-INF/classes/ in
#           each of your TightBlog installations.
#
#   Note a Properties.getProperty("foo.bar") for any property not listed is "null"
#   while a property listed but with no value (e.g., "foo.bar=" is an empty string.
#
#---------------------------------
# Database configuration settings
#---------------------------------

# These values must be provided in your tightblog-custom.properties file, kept
# in the top-level Tomcat "lib" folder (the folder that has conf, logs, and webapps
# as siblings) or similar location for other servlet containers.
spring.datasource.url=jdbc:derby:memory:testdb;create=true
spring.datasource.username=SA
spring.datasource.password=SA
spring.datasource.driverClassName=org.apache.derby.jdbc.ClientDriver

# TightBlog is coded to require SSL.  For standalone Tomcat, below values can be ignored
# and instead see here: http://tomcat.apache.org/tomcat-9.0-doc/ssl-howto.html for SSL
# setup.
#
# For embedded Tomcat (gradle bootRun) create a keystore, place in src/main/resources
# and configure its properties below. For keystore creation and other security info,
# these articles provide useful information;
# https://howtodoinjava.com/spring-boot/spring-boot-ssl-https-example/
# https://www.thomasvitale.com/https-spring-boot-ssl-certificate/
#server.port=8443
#server.ssl.key-store=classpath:serverKeystore.jks
#server.ssl.key-store-password=mypass1
#server.ssl.key-password=mypass1

# Additional properties can be added to customize EclipseLink's default connection pooling,
# see https://github.com/gmazza/tightblog/wiki/Install04-Deploy-to-Tomcat.

#-----------------------------------
# Mail server connection parameters
#-----------------------------------

# Override to true to activate email functionality
mail.enabled=false

# If using mail, provide these two fields in your custom properties file.
# If you are using GMail these are the only two fields needed.
#spring.mail.username=blah.blah@gmail.com
#spring.mail.password=blahspassword

# If you're not using GMail (or otherwise wish to override the defaults below)
# override any or all as appropriate for your email server in your custom file.
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.properties.mail.smtp.auth = true
spring.mail.properties.mail.smtp.starttls.enable = true
spring.mail.properties.mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory
spring.mail.properties.mail.smtp.connectiontimeout = 60000
spring.mail.properties.mail.smtp.timeout = 60000


#-----------------------------------------------------------------------------
# Directory settings
#-----------------------------------------------------------------------------

# The directory in which TightBlog will upload files
mediafiles.storage.dir=tightblog_data/mediafiles

# Activates blog entry indexing for reader search functionality.
# To save processing/space, override to false if don't wish to provide searching
# or using external indexers (e.g. Google Custom Search Engine).
search.enabled=true

# Below search.* parameters relevant only if search.enabled is true

# Directory in which search index is to be created, TightBlog will create
# folder if it doesn't already exist.  Delete this directory prior to startup
# to force TightBlog to regenerate the entire search index.
search.index.dir=tightblog_data/search-index

# If search.enabled = true, include comment text as part of the search?
# Note if changing this value on a currently running instance, should delete folder at
# search.index.dir before restarting TightBlog to regenerate index with/without comments.
search.include.comments=true

# Used for maxTokenCount in Lucene's LimitTokenCountAnalyzer -- max number of tokens
# that will be parsed for any document (blog entry).  Non space-delimited languages
# may benefit from having a higher value.
search.analyzer.maxTokenCount=1000

# The Lucene search analyzer used.  StandardAnalyzer is optimized for English (as it
# contains English-langauge stopwords), but usable for most space-delimited languages.
# Otherlanguage-specific optimizers available, however note the optimizer chosen here
# will be used for all blogs.
search.analyzer.class=org.apache.lucene.analysis.standard.StandardAnalyzer

#-----------------------------------------------------------------------------
# Other settings
#-----------------------------------------------------------------------------

# suppress jsession IDs from URLs
# https://blog.ik.am/entries/353
server.servlet.session.tracking-modes=cookie
server.servlet.session.timeout=45m
server.servlet.session.cookie.http-only=true

# URL paths that don't represent blogs:  Used by the RequestMappingFilter to determine non-blog URLs
# (e.g., those going to TightBlog UI or static resources)
invalid.weblog.handles=blogthemes,images,scripts,styles,tb-ui,thymeleaf,favicon.ico,robots.txt

# Whether to require multifactor authentication using Google Authenticator
# If ever needed, secret for user can deleted in User table to restart MFA setup process
mfa.enabled=true

# populated by Maven during build
weblogger.version=${version}
weblogger.revision=${buildNumber}

# Indicates the expected database version of this particular TightBlog release
# used to determine whether DB upgrades needed.
# Should never be overridden in the customization file, and updated here only
# when a new release has a new DB migration script (indicating a changed DB).
tightblog.database.expected.version=200

# default links to include in blogroll of each new blog
# format is like so: linktitle2|linkurl2,linktitle2|linkurl2,linktitle3|linkurl3
newblog.blogroll=\
TightBlog|https://github.com/gmazza/tightblog,\
Baeldung|https://www.baeldung.com/,\
InfoQ|https://www.infoq.com/

# comma-separated list of default categories to be created in each new weblog
newblog.categories=Technology,Finance,General

# maximum allowed number of blog entries per page (can be configured lower for each
# blog on the blog settings page.)
site.pages.maxEntries=30

# To override the calculated root URL for the application (see InitFilter.java), helpful if proxying.
# (The calculated root URL is determined from the URL that is first used to access the application upon its startup.)
# Leave undefined if not overriding.
# Provide to just before the first "/" after context path (i.e., include the app WAR name).
# e.g., https://tightblog.example.com/tightblog if the deployed WAR is tightblog.war
#site.absoluteUrl=

# Optional and used for embedded Tomcat only to avoid having the application
# run directly at the root (e.g., run at https://localhost/tightblog instead).
# Should be the ending part of site.absoluteUrl if that property is provided.
server.servlet.contextPath=/tightblog


