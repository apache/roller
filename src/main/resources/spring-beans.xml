<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2016 the original author or authors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!-- Can override any bean here without needing to alter the tightblog WAR by defining
     the override in a tightblog-custom.xml file in the runtime classpath,
     e.g., CATALINA_HOME/lib/tightblog.xml for Tomcat -->
<beans:beans xmlns:security="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:util="http://www.springframework.org/schema/util"
             xmlns:task="http://www.springframework.org/schema/task"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
          http://www.springframework.org/schema/util
          http://www.springframework.org/schema/util/spring-util-4.3.xsd
          http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security.xsd
          http://www.springframework.org/schema/task
          http://www.springframework.org/schema/task/spring-task-4.2.xsd
          ">
    <!-- Any of these values can be overridden and maintained outside of the WAR by placing in a separate
         tightblog-custom.xml file in the servlet container's library folder, e.g. for Tomcat its lib folder
         (same place where application-tbcustom.properties is kept.) -->

    <!-- Have JSR-250 annotations (PostConstruct, PreDestroy) honored by Spring -->
    <beans:bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>

    <!-- Spring Security Configuration -->

    <security:http pattern="/images/**" security="none"/>
    <security:http pattern="/scripts/**" security="none"/>
    <security:http pattern="/styles/**" security="none"/>

    <security:http use-expressions="false" auto-config="false" access-decision-manager-ref="accessDecisionManager">
        <security:intercept-url requires-channel="https" pattern="/tb-ui/admin/**" access="ADMIN"/>
        <security:intercept-url requires-channel="https" pattern="/tb-ui/app/admin/**" access="ADMIN"/>
        <security:intercept-url requires-channel="https" pattern="/tb-ui/authoring/**" access="ADMIN,BLOGCREATOR,BLOGGER"/>
        <security:intercept-url requires-channel="https" pattern="/tb-ui/app/authoring/**" access="ADMIN,BLOGCREATOR,BLOGGER"/>
        <security:intercept-url requires-channel="https" pattern="/tb-ui/app/createWeblog" access="ADMIN,BLOGCREATOR"/>
        <security:intercept-url requires-channel="https" pattern="/tb-ui/app/login-redirect" access="ADMIN,BLOGCREATOR,BLOGGER,MISSING_MFA_SECRET"/>
        <security:intercept-url requires-channel="https" pattern="/tb-ui/app/profile" access="ADMIN,BLOGCREATOR,BLOGGER"/>
        <security:intercept-url requires-channel="https" pattern="/tb-ui/app/scanCode" access="MISSING_MFA_SECRET"/>
        <security:intercept-url requires-channel="https" pattern="/tb-ui/app/home" access="ADMIN,BLOGCREATOR,BLOGGER"/>

        <!-- Detect login redirects occurring as a result of Ajax GET calls and send a 408 (timeout) response
             code to the client instead, so the Ajax call can handle properly, see:
             https://doanduyhai.wordpress.com/2012/04/21/spring-security-part-vi-session-timeout-handling-for-ajax-calls/

             Ajax calls that trigger CSRF checking get 408s sent instead via CustomAccessDeniedHandlerImpl.
        -->
        <security:custom-filter ref="ajaxInvalidSessionRedirectFilter" after="EXCEPTION_TRANSLATION_FILTER"/>

        <security:csrf request-matcher-ref="csrfSecurityRequestMatcher" token-repository-ref="tokenRepository"/>

        <!-- Needed to allow for popups -->
        <security:headers>
            <security:frame-options policy="SAMEORIGIN"/>
            <!-- Disabled to allow some non-SSL pages & resources -->
            <security:hsts disabled="true"/>
        </security:headers>

        <security:form-login login-page="/tb-ui/app/login"
                             authentication-failure-url="/tb-ui/app/login?error=true"
                             authentication-details-source-ref="customWebAuthenticationDetailsSource"
                             login-processing-url="/tb_j_security_check"
                             authentication-success-handler-ref="customAuthenticationSuccessHandler" />

        <security:access-denied-handler ref="customAccessDeniedHandlerImpl"/>

    </security:http>

    <security:authentication-manager>
        <security:authentication-provider ref="multiFactorAuthenticationProvider"/>
    </security:authentication-manager>

    <!-- Using cookie instead of default session header for CSRF tokens as former appear easier to refresh for all app tabs -->
    <beans:bean id="tokenRepository"
                class="org.springframework.security.web.csrf.CookieCsrfTokenRepository">
        <beans:property name="cookieHttpOnly" value="false"/>
    </beans:bean>

    <beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <beans:constructor-arg ref="roleVoter"/>
        <beans:property name="allowIfAllAbstainDecisions" value="false"/>
    </beans:bean>

    <beans:bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter">
        <beans:property name="rolePrefix" value=""/>
    </beans:bean>

    <beans:bean id="tbDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <beans:property name="driverClassName" value="${spring.datasource.driverClassName:#{null}}" />
        <beans:property name="url" value="${spring.datasource.url:#{null}}" />
        <beans:property name="username" value="${spring.datasource.username:#{null}}" />
        <beans:property name="password" value="${spring.datasource.password:#{null}}" />
    </beans:bean>

    <beans:bean id="filterMultipartResolver"
                class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <beans:property name="maxUploadSize" value="-1" />
    </beans:bean>

    <beans:bean id="previewUrlModel" parent="urlModel" class="org.tightblog.rendering.model.URLModel" scope="prototype">
        <!-- urlService is manually constructed with the shared theme being previewed -->
        <beans:property name="urlService"><beans:null/></beans:property>
    </beans:bean>

    <beans:bean id="pageModelSet" class="org.springframework.beans.factory.config.SetFactoryBean" scope="prototype">
        <beans:property name="sourceSet">
            <beans:set>
                <beans:ref bean="utilitiesModel"/>
                <beans:ref bean="urlModel"/>
            </beans:set>
        </beans:property>
    </beans:bean>

    <!-- For weblog page preview rendering -->
    <beans:bean id="previewModelSet" class="org.springframework.beans.factory.config.SetFactoryBean" scope="prototype">
        <beans:property name="sourceSet">
            <beans:set>
                <beans:ref bean="utilitiesModel"/>
                <beans:ref bean="previewUrlModel"/>
            </beans:set>
        </beans:property>
    </beans:bean>

    <!-- Caches -->
    <beans:bean id="weblogPageCache" class="org.tightblog.rendering.cache.LazyExpiringCache">
        <beans:property name="cacheHandlerId" value="cache.weblogpage"/>
        <beans:property name="maxEntries" value="400"/>
        <beans:property name="timeoutSec" value="3600"/>
    </beans:bean>

    <beans:bean id="weblogFeedCache" class="org.tightblog.rendering.cache.LazyExpiringCache">
        <beans:property name="cacheHandlerId" value="cache.weblogfeed"/>
        <beans:property name="maxEntries" value="200"/>
        <beans:property name="timeoutSec" value="3600"/>
    </beans:bean>

    <beans:bean id="weblogMediaCache" class="org.tightblog.rendering.cache.LazyExpiringCache">
        <beans:property name="cacheHandlerId" value="cache.weblogmedia"/>
        <!-- Media images aren't cached, cache kept for HTTP 304 stats only -->
        <beans:property name="maxEntries" value="0"/>
        <beans:property name="timeoutSec" value="3600"/>
    </beans:bean>

    <!-- JSR 349, resolution of validation messages in JPA entity beans -->
    <beans:bean id="beanValidator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <beans:property name="validationMessageSource">
            <beans:ref bean="messageSource"/>
        </beans:property>
    </beans:bean>

    <!-- Overriding the default Spring JSON converter so Jackson will strip off the nanoseconds portion when it
         serializes java.time.Instant objects.  Makes conversion and date display much easier on the browser side.
         See: http://stackoverflow.com/q/37999762/1207540
    -->
    <beans:bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <beans:property name="objectMapper">
            <beans:bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                <beans:property name="featuresToDisable">
                    <beans:array>
                        <util:constant static-field="com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS"/>
                    </beans:array>
                </beans:property>
            </beans:bean>
        </beans:property>
    </beans:bean>

    <beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
        <!-- See CommentProcessor for an example of how URLs are combined at the class- and method-level. -->
        <beans:property name="alwaysUseFullPath" value="true"/>
    </beans:bean>

    <task:scheduled-tasks scheduler="blogTaskScheduler">
        <!-- uncomment/comment and configure frequency of each task as desired -->
        <!-- midnight every day -->
        <task:scheduled ref="weblogRepository" method="updateDailyHitCountZero" cron="0 0 0 * * *"/>
        <!-- every 4 hours -->
        <task:scheduled ref="weblogManager" method="promoteScheduledEntries" cron="0 0 0/4 * * *"/>
        <!-- every 15 mins -->
        <task:scheduled ref="weblogManager" method="updateHitCounters" cron="0 0/20 * * * *"/>
    </task:scheduled-tasks>

</beans:beans>
