package org.roller.pojos;

import java.io.Serializable;
import java.util.Date;



/**
 * This class is used to manage cookie-based authentication.
 *
 * @author Matt Raible
 * @version $Revision: 1.2 $ $Date: 2005/01/21 19:01:10 $
 *
 * @hibernate.class table="usercookie"
 */
public class UserCookieData extends PersistentObject implements Serializable
{
    static final long serialVersionUID = -1109195226932397420L;

    private String id;
    private String username;
    private String cookieId;
    private Date dateCreated;

    public UserCookieData()
    {
        this.dateCreated = new Date();
    }

    public UserCookieData( String id, String username, String cookieId,
                       Date dateCreated )
    {
        this.id = id;
        this.username = username;
        this.cookieId = cookieId;
        this.dateCreated = (Date)dateCreated.clone();
    }

    public UserCookieData( UserCookieData otherData )
    {
        this.id = otherData.id;
        this.username = otherData.username;
        this.cookieId = otherData.cookieId;
        this.dateCreated = (Date)otherData.dateCreated.clone();
    }


    /**
     * @ejb:persistent-field
     * @hibernate.id column="id" type="string"
     *  generator-class="uuid.hex" unsaved-value="null"
     */
    public java.lang.String getId()
    {
       return this.id;
    }
    /** @ejb:persistent-field */
    public void setId( java.lang.String id )
    {
       this.id = id;
    }

    /**
     * Returns the username.
     * @ejb:persistent-field
     * @hibernate.property column="username" not-null="true" unique="false"
     * @return String
     */
    public String getUsername()
    {
        return username;
    }

    /**
     * Sets the username.
     * @ejb:persistent-field
     * @param username The username to set
     */
    public void setUsername( String username )
    {
        this.username = username;
    }

    /**
     * Returns the cookieId (a GUID).
     * @ejb:persistent-field
     * @hibernate.property column="cookieid" not-null="true" unique="true"
     * @return String
     */
    public String getCookieId()
    {
        return cookieId;
    }

    /**
     * Sets the cookieId.
     * @ejb:persistent-field
     * @param rolename The cookieId to set
     */
    public void setCookieId( String rolename )
    {
        this.cookieId = rolename;
    }

    /**
     * @return Returns the dateCreated.
     * @ejb:persistent-field
     * @hibernate.property column="datecreated" not-null="true" unique="false"
     */
    public Date getDateCreated()
    {
        return (Date)dateCreated.clone();
    }

    /**
     * @param dateCreated The dateCreated to set.
     * @ejb:persistent-field
     */
    public void setDateCreated(final Date dateCreated )
    {
        if (dateCreated != null)
        {
        	this.dateCreated = (Date)dateCreated.clone();
        }
        else
        {
        	this.dateCreated = null;
        }
    }

	/**
	 * @see org.roller.pojos.PersistentObject#setData(org.roller.pojos.PersistentObject)
	 */
	public void setData(PersistentObject vo) {
		UserCookieData newData = (UserCookieData) vo;
        this.id = newData.getId();
        this.username = newData.getUsername();
        this.cookieId = newData.getCookieId();
        this.dateCreated = newData.getDateCreated();
	}

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object o)
    {
        // Generated by IDEA 4.5.1
        // But avoid super.equals() because that has a full reflection-based implementation.
        if (this == o)
        {
            return true;
        }
        if (!(o instanceof UserCookieData))
        {
            return false;
        }
        final UserCookieData userCookieData = (UserCookieData)o;

        if (cookieId != null ? !cookieId.equals(userCookieData.cookieId) : userCookieData.cookieId != null)
        {
            return false;
        }
        if (dateCreated != null ? !dateCreated.equals(userCookieData.dateCreated) : userCookieData.dateCreated != null)
        {
            return false;
        }
        if (id != null ? !id.equals(userCookieData.id) : userCookieData.id != null)
        {
            return false;
        }
        if (username != null ? !username.equals(userCookieData.username) : userCookieData.username != null)
        {
            return false;
        }

        return true;
    }

    /**
     * @see java.lang.Object#hashCode()
     */
    public int hashCode()
    {
        // Hash on id and dateCreated.
        // But avoid super.hashCode() because that has a full reflection-based implementation.
        int result = 0;
        result = 29 * result + (id != null ? id.hashCode() : 0);
        result = 29 * result + (dateCreated != null ? dateCreated.hashCode() : 0);
        return result;
    }

}
