# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  The ASF licenses this file to You
# under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.  For additional information regarding
# copyright in this work, please see the NOTICE file in the top level
# directory of this distribution.
#
# Source file modified from the original ASF source; all changes made
# are also under Apache License.
#
# tightblog.properties
#
# This file is for meant for TightBlog deployment properties
# Properties that aren't changeable during runtime are defined here
#
# You can override the values in this file in a couple ways ..
#   1. define a tightblog-custom.properties file and place it somewhere
#       at the root of one of your classpath locations.
#       for example:
#           $TOMCAT_HOME/lib
#           $TIGHTBLOG_LOCATION/WEB-INF/classes
#
#   2. specify a custom properties file via jvm option
#       example:
#           tightblog.custom.config=/path/to/properties/file
#
#   If you do both, #2 will override any properties in #1.
#
#   **NOTE: if you run multiple instances of TightBlog on the same server
#           then you should beware of the fact that the override options above
#           may affect *all* of your running instances.  if you want to do
#           custom overrides for each instance then you must do it by
#           placing a tightblog-custom.properties file at WEB-INF/classes/ in
#           each of your TightBlog installations.
#
#   Note a Properties.getProperty("foo.bar") for any property not listed is "null"
#   while a property listed but with no value (e.g., "foo.bar=" is an empty string.
#
#---------------------------------
# Database configuration settings
#---------------------------------

# Specify database configuration type of 'jndi' or 'jdbc'
database.configurationType=jndi

# For database configuration type 'jndi', this will be used.
database.jndi.name=java:comp/env/jdbc/tightblogdb

# For database configuration type of 'jdbc', you MUST override these
database.jdbc.driverClass=
database.jdbc.connectionURL=
database.jdbc.username=
database.jdbc.password=

# For JDBC config type, additional properties can be added to customize EclipseLink's default
# connection pooling.  For JNDI, connection pooling is configured with your app server.
# see https://github.com/gmazza/tightblog/wiki/Install04-Deploy-to-Tomcat.

#-----------------------------------
# Mail server connection parameters
#-----------------------------------

# Override to false to suppress all email sending, especially
# if you haven't configured mail
# (otherwise logs fill up with cannot send message errors)
mail.enabled=true

# If using mail, provide these two fields in your custom properties file.
# If you are using GMail these are the only two fields needed.
#mail.smtp.user=blah.blah@gmail.com
#mail.smtp.password=blahspassword

# If you're not using GMail (or otherwise wish to override the defaults below)
# override any or all as appropriate for your email server in your custom file.
mail.transport.protocol=smtp
mail.smtp.host=smtp.gmail.com
mail.smtp.port=587
mail.smtp.auth=true
mail.smtp.starttls.enable=true
mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory
mail.smtp.socketFactory.port=587
mail.smtp.socketFactory.fallback=false


#-----------------------------------------------------------------------------
# Directory settings
#-----------------------------------------------------------------------------

# The directory in which TightBlog will upload files
mediafiles.storage.dir=${user.home}/tightblog_data/mediafiles

# Activates blog entry indexing for reader search functionality.
# To save processing/space, override to false if don't wish to provide searching
# or using external indexers (e.g. Google Custom Search Engine).
search.enabled=true

# Below search.* parameters relevant only if search.enabled is true

# Directory in which search index is to be created, TightBlog will create
# folder if it doesn't already exist.  Delete this directory prior to startup
# to force TightBlog to regenerate the entire search index.
search.index.dir=${user.home}/tightblog_data/search-index

# If search.enabled = true, include comment text as part of the search?
# Note if changing this value on a currently running instance, should delete folder at
# search.index.dir before restarting TightBlog to regenerate index with/without comments.
search.include.comments=true

# Used for maxTokenCount in Lucene's LimitTokenCountAnalyzer -- max number of tokens
# that will be parsed for any document (blog entry).  Non space-delimited languages
# may benefit from having a higher value.
search.analyzer.maxTokenCount=1000

# The Lucene search analyzer used.  StandardAnalyzer is optimized for English (as it
# contains English-langauge stopwords), but usable for most space-delimited languages.
# Otherlanguage-specific optimizers available, however note the optimizer chosen here
# will be used for all blogs.
search.analyzer.class=org.apache.lucene.analysis.standard.StandardAnalyzer

# For running of tests only, to specify a non-webapp context location for the
# shared weblog theme resources (no servlet then).  Leave commented in production.
#themes.dir=${webapp.context}

#-----------------------------------------------------------------------------
# Other settings
#-----------------------------------------------------------------------------

# populated by Maven during build
weblogger.version=${project.version}
weblogger.revision=${buildNumber}

# Indicates the expected database version of this particular TightBlog release
# used to determine whether DB upgrades needed.
# Should never be overridden in the customization file, and updated here only
# when a new release has a new DB migration script (indicating a changed DB).
tightblog.database.expected.version=200

# default links to include in blogroll of each new blog
# format is like so: linktitle2|linkurl2,linktitle2|linkurl2,linktitle3|linkurl3
newuser.blogroll=\
TightBlog|https://github.com/gmazza/tightblog,\
InfoQ|https://www.infoq.com/

# comma-separated list of default categories to be created in each new weblog
newuser.categories=Technology,Finance,General

# maximum allowed number of blog entries per page (can be configured lower for each
# blog on the blog settings page.)
site.pages.maxEntries=30

# EclipseLink JPA properties
eclipselink.persistence-context.flush-mode=auto

# To override the calculated root URL for the application (see InitFilter.java), helpful if proxying.
# (The calculated root URL is determined from the URL that is first used to access the application upon its startup.)
# Leave undefined if not overriding.
# Provide to just before the first "/" after context path (i.e., include the app WAR name).
# e.g., https://tightblog.example.com/tightblog if the deployed WAR is tightblog.war
#site.absoluteurl=
