<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2016 the original author or authors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!-- Can override any bean here without needing to alter the tightblog WAR by defining
     the override in a tightblog-custom.xml file in the runtime classpath,
     e.g., CATALINA_HOME/lib/tightblog.xml for Tomcat -->
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:util="http://www.springframework.org/schema/util"
             xmlns:context="http://www.springframework.org/schema/context"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
          http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-4.3.xsd
          http://www.springframework.org/schema/util
          http://www.springframework.org/schema/util/spring-util-4.3.xsd">

    <!-- Scan components in given packages marked @Component, @Controller, etc. and register them as beans -->
    <context:component-scan base-package="org.tightblog.business
                                          org.tightblog.business.search
                                          org.tightblog.rendering.*
                                          org.tightblog.ui.filters
                                          org.tightblog.ui.menu">
    </context:component-scan>

    <beans:bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <beans:property name="locations">
           <beans:list>
              <beans:value>classpath:tightblog.properties</beans:value>
              <beans:value>classpath:tightblog-custom.properties</beans:value>
              <beans:value>file:#{systemProperties['tightblog.custom.config']}</beans:value>
           </beans:list>
        </beans:property>
        <beans:property name="ignoreResourceNotFound" value="true"/>
        <beans:property name="ignoreUnresolvablePlaceholders" value="true"/>
    </beans:bean>

    <!-- Any of these values can be overridden and maintained outside of the WAR by placing in a separate
         tightblog-custom.xml file in the servlet container's library folder, e.g. for Tomcat its lib folder
         (same place where tightblog-custom.properties is kept.) -->

    <!-- Have JSR-250 annotations (PostConstruct, PreDestroy) honored by Spring -->
    <beans:bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>

    <beans:bean id="jdbc" abstract="true" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <beans:property name="driverClassName" value="${database.jdbc.driverClass:#{null}}" />
        <beans:property name="url" value="${database.jdbc.connectionURL:#{null}}" />
        <beans:property name="username" value="${database.jdbc.username:#{null}}" />
        <beans:property name="password" value="${database.jdbc.password:#{null}}" />
    </beans:bean>

    <beans:bean id="jndi" abstract="true" class="org.springframework.jndi.JndiObjectFactoryBean">
        <beans:property name="jndiName" value="${database.jndi.name:#{null}}"/>
    </beans:bean>

    <beans:bean id="tbDataSource" parent="${database.configurationType}" />

    <beans:bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <beans:property name="protocol" value="${mail.transport.protocol}"/>
        <beans:property name="host" value="${mail.smtp.host}"/>
        <beans:property name="port" value="${mail.smtp.port}"/>
        <beans:property name="username" value="${mail.smtp.user:#{null}}"/>
        <beans:property name="password" value="${mail.smtp.password:#{null}}"/>
        <beans:property name="javaMailProperties">
            <beans:props>
                <beans:prop key="mail.smtp.auth">${mail.smtp.auth}</beans:prop>
                <beans:prop key="mail.smtp.starttls.enable">${mail.smtp.starttls.enable}</beans:prop>
                <beans:prop key="mail.smtp.socketFactory.class">${mail.smtp.socketFactory.class}</beans:prop>
                <beans:prop key="mail.smtp.socketFactory.port">${mail.smtp.socketFactory.port}</beans:prop>
                <beans:prop key="mail.smtp.socketFactory.fallback">${mail.smtp.socketFactory.fallback}</beans:prop>
            </beans:props>
        </beans:property>
    </beans:bean>

    <beans:bean id="blogTemplateResolver" class="org.tightblog.rendering.thymeleaf.ThemeTemplateResolver">
        <beans:property name="templateMode" value="HTML5"/>
        <beans:property name="order" value="1"/>
        <beans:property name="checkExistence" value="true"/>
        <!-- we want changes to blog templates to propagate immediately: https://stackoverflow.com/a/28530365 -->
        <beans:property name="cacheable" value="false"/>
        <beans:property name="themeManager" ref="themeManager"/>
        <beans:property name="weblogManager" ref="weblogManager"/>
    </beans:bean>

    <beans:bean id="standardTemplateResolver" class="org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver">
        <beans:property name="templateMode" value="HTML5"/>
        <beans:property name="prefix" value="/thymeleaf/" />
        <beans:property name="suffix" value=".html" />
        <beans:property name="order" value="2"/>
        <!-- templates here can't be modified via UI, so good to cache -->
        <beans:property name="cacheable" value="true"/>
    </beans:bean>

    <beans:bean id="blogTemplateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
        <beans:property name="templateResolvers">
            <beans:set>
                <!-- resolution order defined by resolver 'order' attributes -->
                <beans:ref bean="blogTemplateResolver"/>
                <beans:ref bean="standardTemplateResolver"/>
            </beans:set>
        </beans:property>
    </beans:bean>

    <beans:bean id="standardTemplateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
        <beans:property name="templateResolver" ref="standardTemplateResolver" />
    </beans:bean>

    <beans:bean id="blogRenderer" class="org.tightblog.rendering.thymeleaf.ThymeleafRenderer">
        <beans:property name="templateEngine" ref="blogTemplateEngine"/>
    </beans:bean>

    <beans:bean id="atomRenderer" class="org.tightblog.rendering.thymeleaf.ThymeleafRenderer">
        <beans:property name="templateEngine" ref="standardTemplateEngine"/>
    </beans:bean>

    <beans:bean id="previewPageModel" parent="pageModel" class="org.tightblog.rendering.model.PageModel" scope="prototype">
        <beans:property name="preview" value="true"/>
        <!-- urlStrategy is manually constructed with the shared theme being previewed -->
        <beans:property name="urlStrategy"><beans:null/></beans:property>
    </beans:bean>

    <beans:bean id="previewUrlModel" parent="urlModel" class="org.tightblog.rendering.model.URLModel" scope="prototype">
        <beans:property name="preview" value="true"/>
        <!-- urlStrategy is manually constructed with the shared theme being previewed -->
        <beans:property name="urlStrategy"><beans:null/></beans:property>
    </beans:bean>

    <beans:bean id="pageModelSet" class="org.springframework.beans.factory.config.SetFactoryBean" scope="prototype">
        <beans:property name="sourceSet">
            <beans:set>
                <beans:ref bean="pageModel"/>
                <beans:ref bean="utilitiesModel"/>
                <beans:ref bean="urlModel"/>
            </beans:set>
        </beans:property>
    </beans:bean>

    <!-- For weblog page preview rendering -->
    <beans:bean id="previewModelSet" class="org.springframework.beans.factory.config.SetFactoryBean" scope="prototype">
        <beans:property name="sourceSet">
            <beans:set>
                <beans:ref bean="previewPageModel"/>
                <beans:ref bean="utilitiesModel"/>
                <beans:ref bean="previewUrlModel"/>
            </beans:set>
        </beans:property>
    </beans:bean>

    <beans:bean id="feedModelSet" class="org.springframework.beans.factory.config.SetFactoryBean" scope="prototype">
        <beans:property name="sourceSet">
            <beans:set>
                <beans:ref bean="feedModel"/>
                <beans:ref bean="utilitiesModel"/>
                <beans:ref bean="urlModel"/>
            </beans:set>
        </beans:property>
    </beans:bean>

    <beans:bean id="searchModelSet" class="org.springframework.beans.factory.config.SetFactoryBean" scope="prototype">
        <beans:property name="sourceSet">
            <beans:set>
                <beans:ref bean="searchResultsModel"/>
                <beans:ref bean="utilitiesModel"/>
                <beans:ref bean="urlModel"/>
            </beans:set>
        </beans:property>
    </beans:bean>

    <beans:bean id="siteModelSet" class="org.springframework.beans.factory.config.SetFactoryBean" scope="prototype">
        <beans:property name="sourceSet">
            <beans:set>
                <beans:ref bean="siteModel"/>
            </beans:set>
        </beans:property>
    </beans:bean>

    <!-- Comment Validators -->
    <beans:bean id="commentValidatorList" class="org.springframework.beans.factory.config.ListFactoryBean">
        <beans:property name="sourceList">
            <beans:list>
                <beans:ref bean="blacklistCommentValidator"/>
                <beans:bean class="org.tightblog.rendering.comment.ExcessLinksCommentValidator"/>
                <beans:bean class="org.tightblog.rendering.comment.ExcessSizeCommentValidator"/>
                <!--Akismet requires configuration of user key below, see top of this file for instructions -->
                <!--beans:bean class="AkismetCommentValidator">
                    <beans:constructor-arg ref="urlStrategy"/>
                    <beans:constructor-arg name="apiKey" value="...your key here..."/>
                    <beans:property name="deleteBlatantSpam" value="false"/>
                </beans:bean-->
            </beans:list>
        </beans:property>
    </beans:bean>

    <!-- The Comment Authenticator is the first-round test a commentor must do before his comment is accepted
         (answer a math question to confirm not a robot, or be already authenticated for example.)
         After authentication, the comment still needs to go through comment validation (possibly marking it
         as spam) as well as (if configured for the blog) comment approval.

         Comment out below bean to disable this check.
    -->
    <beans:bean id="commentAuthenticator" class="org.tightblog.rendering.comment.MathCommentAuthenticator"/>

    <!-- Restricted handles that may not represent blogs:  Used by the RequestMappingFilter to quickly toss-out non-blog URLs.
        These will correspond to the top folder names in the webapp folder, except the already blocked META- and WEB-INF folders.
    -->
    <beans:bean id="invalidWeblogHandles" class="org.springframework.beans.factory.config.SetFactoryBean">
        <beans:property name="sourceSet">
            <beans:set>
                <beans:value>blogthemes</beans:value>
                <beans:value>images</beans:value>
                <beans:value>scripts</beans:value>
                <beans:value>tb-ui</beans:value>
                <beans:value>thymeleaf</beans:value>
                <beans:value>favicon.ico</beans:value>
                <beans:value>robots.txt</beans:value>
            </beans:set>
        </beans:property>
    </beans:bean>

    <!-- Caches -->
    <beans:bean id="weblogPageCache" class="org.tightblog.rendering.cache.LazyExpiringCache">
        <beans:property name="cacheHandlerId" value="cache.weblogpage"/>
        <beans:property name="maxEntries" value="400"/>
        <beans:property name="timeoutSec" value="3600"/>
    </beans:bean>

    <beans:bean id="weblogFeedCache" class="org.tightblog.rendering.cache.LazyExpiringCache">
        <beans:property name="cacheHandlerId" value="cache.weblogfeed"/>
        <beans:property name="maxEntries" value="200"/>
        <beans:property name="timeoutSec" value="3600"/>
    </beans:bean>

    <beans:bean id="cacheSet" class="org.springframework.beans.factory.config.SetFactoryBean">
        <beans:property name="sourceSet">
            <beans:set>
                <beans:ref bean="weblogPageCache"/>
                <beans:ref bean="weblogFeedCache"/>
            </beans:set>
        </beans:property>
    </beans:bean>

    <beans:bean id="filterMultipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <beans:property name="maxUploadSize" value="-1" />
    </beans:bean>

    <!-- JSR 349, resolution of validation messages in JPA entity beans -->
    <beans:bean id="beanValidator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <beans:property name="validationMessageSource">
            <beans:ref bean="messageSource"/>
        </beans:property>
    </beans:bean>

    <beans:bean name="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <beans:property name="basenames">
            <beans:list>
                <beans:value>ApplicationResources</beans:value>
            </beans:list>
        </beans:property>
    </beans:bean>

    <!-- Overriding the default Spring JSON converter so Jackson will strip off the nanoseconds portion when it
         serializes java.time.Instant objects.  Makes conversion and date display much easier on the browser side.
         See: http://stackoverflow.com/q/37999762/1207540
    -->
    <beans:bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <beans:property name="objectMapper">
            <beans:bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                <beans:property name="featuresToDisable">
                    <beans:array>
                        <util:constant static-field="com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS"/>
                    </beans:array>
                </beans:property>
            </beans:bean>
        </beans:property>
    </beans:bean>

</beans:beans>
