<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  The ASF licenses this file to You
  under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.  For additional information regarding
  copyright in this work, please see the NOTICE file in the top level
  directory of this distribution.

  Source file modified from the original ASF source; all changes made
  are also under Apache License.
-->
<beans:beans xmlns="http://www.springframework.org/schema/security"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
          http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security-4.2.xsd">

    <http pattern="/images/**" security="none"/>
    <http pattern="/scripts/**" security="none"/>
    <http pattern="/styles/**" security="none"/>

    <http use-expressions="false" auto-config="false" access-decision-manager-ref="accessDecisionManager">
        <intercept-url pattern="/tb-ui/admin/**" access="ADMIN"/>
        <intercept-url pattern="/tb-ui/app/admin/**" access="ADMIN"/>
        <intercept-url pattern="/tb-ui/authoring/**" access="ADMIN,BLOGCREATOR,BLOGGER"/>
        <intercept-url pattern="/tb-ui/app/authoring/**" access="ADMIN,BLOGCREATOR,BLOGGER"/>
        <intercept-url pattern="/tb-ui/app/createWeblog" access="ADMIN,BLOGCREATOR"/>
        <intercept-url pattern="/tb-ui/app/login-redirect" access="ADMIN,BLOGCREATOR,BLOGGER,MISSING_MFA_SECRET"/>
        <intercept-url pattern="/tb-ui/app/profile" access="ADMIN,BLOGCREATOR,BLOGGER"/>
        <intercept-url pattern="/tb-ui/app/scanCode" access="MISSING_MFA_SECRET"/>
        <intercept-url pattern="/tb-ui/app/home" access="ADMIN,BLOGCREATOR,BLOGGER"/>

        <!-- Detect login redirects occurring as a result of Ajax GET calls and send a 408 (timeout) response
             code to the client instead, so the Ajax call can handle properly, see:
             https://doanduyhai.wordpress.com/2012/04/21/spring-security-part-vi-session-timeout-handling-for-ajax-calls/

             Ajax calls that trigger CSRF checking get 408s sent instead via CustomAccessDeniedHandlerImpl.
        -->
        <custom-filter ref="ajaxInvalidSessionRedirectFilter" after="EXCEPTION_TRANSLATION_FILTER"/>

        <csrf request-matcher-ref="csrfRequestMatcher" token-repository-ref="tokenRepository"/>

        <!-- Needed to allow for popups -->
        <headers>
            <frame-options policy="SAMEORIGIN"/>
            <!-- Disabled to allow some non-SSL pages & resources -->
            <hsts disabled="true"/>
        </headers>

        <form-login login-page="/tb-ui/app/login"
                    authentication-failure-url="/tb-ui/app/login?error=true"
                    authentication-details-source-ref="customWebAuthenticationDetailsSource"
                    login-processing-url="/roller_j_security_check"
                    authentication-success-handler-ref="authenticationSuccessHandler" />

        <access-denied-handler ref="accessDeniedHandler"/>

    </http>

    <!-- Using cookie instead of default session header for CSRF tokens as former appear easier to refresh for all app tabs -->
    <beans:bean id="tokenRepository"
                class="org.springframework.security.web.csrf.CookieCsrfTokenRepository">
        <beans:property name="cookieHttpOnly" value="false"/>
    </beans:bean>

    <beans:bean id="ajaxInvalidSessionRedirectFilter"
                class="org.tightblog.ui.filters.AjaxInvalidSessionRedirectFilter"/>

    <beans:bean id="csrfRequestMatcher" class="org.tightblog.ui.security.CsrfSecurityRequestMatcher"/>

    <beans:bean id="customWebAuthenticationDetailsSource" class="org.tightblog.ui.security.CustomWebAuthenticationDetailsSource"/>

    <beans:bean id="authenticationSuccessHandler"
                class="org.tightblog.ui.security.CustomAuthenticationSuccessHandler">
        <!-- userReferer works in conjuction with CustomAccessDeniedHandlerImpl, so non-AJAX CSRF exceptions
             can redirect back to appropriate page after re-authentication -->
        <beans:property name="userManager" ref="userManager"/>
        <beans:property name="useReferer" value="true" />
    </beans:bean>

    <beans:bean id="accessDeniedHandler"
                class="org.tightblog.ui.security.CustomAccessDeniedHandlerImpl">
    </beans:bean>

    <beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <beans:constructor-arg ref="roleVoter"/>
        <beans:property name="allowIfAllAbstainDecisions" value="false"/>
    </beans:bean>

    <beans:bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter">
        <beans:property name="rolePrefix" value=""/>
    </beans:bean>

    <authentication-manager>
        <authentication-provider ref="dbAuthProvider"/>
    </authentication-manager>

    <beans:bean id="dbAuthProvider" class="org.tightblog.ui.security.MultiFactorAuthenticationProvider">
        <beans:property name="userDetailsService" ref="userDetailsService"/>
        <beans:property name="userManager" ref="userManager"/>
        <beans:property name="passwordEncoder">
            <beans:bean class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
        </beans:property>
    </beans:bean>

    <beans:bean id="userDetailsService" class="org.tightblog.ui.security.CustomUserDetailsService">
        <beans:property name="userManager" ref="userManager"/>
    </beans:bean>

</beans:beans>
